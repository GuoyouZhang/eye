package org.eye.parser;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RfcParser {

	// handle https://tools.ietf.org/rfc/rfc6020.txt

	public static void generateYangKeywordFile(String file) throws Exception {
		FileReader fr = new FileReader(file);
		BufferedReader br = new BufferedReader(fr);

		StringBuilder sb = new StringBuilder();
		StringBuilder keyList = new StringBuilder();
		sb.append("//Auto generated by RfcParser.java. Dont change this file manually\n\n");
		sb.append("package org.yd.util;\n\n");
		sb.append("import java.util.ArrayList;\n");
		sb.append("import java.util.List;\n\n");
		sb.append("public class YangKeyword {\n\n");

		genKeyword(br, sb, keyList);
		sb.append("\tpublic static final String YK_ACTION\t\t=\t\t\"action\";\n"); // yang1.1
		// not yang keyword,but useful
		sb.append("\tpublic static final String YK_COMMENT\t\t=\t\t\"comment\";\n");

		sb.append("\n\n");

		sb.append("\tpublic static final List<String> keywordList = new ArrayList<String>();\n\n");
		sb.append("\tstatic {\n");
		sb.append(keyList.toString());
		sb.append("\t\tkeywordList.add(\"action\");\n");// yang1.1
		sb.append("\t\tkeywordList.add(\"comment\");\n");// yang1.1

		sb.append("\t}\n");
		sb.append("}\n");

		// System.out.println(sb.toString());
		FileUtil.writeFile("./src/org/eye/parser/YangKeyword.java", sb.toString());
		br.close();
		fr.close();
	}

	// e.g. leaf-keyword = 'leaf'
	private static void genKeyword(BufferedReader br, StringBuilder sb, StringBuilder keyList) throws Exception {
		Pattern p = Pattern.compile("\\s*(\\S+)-keyword\\s*=\\s*'(.*?)'");
		String aline = br.readLine();

		while (aline != null) {
			Matcher m = p.matcher(aline);
			if (m.find()) {
				String name = m.group(1).toUpperCase().replace('-', '_');
				sb.append("\tpublic static final String YK_").append(name);
				sb.append("\t\t=\t\t\"").append(m.group(2)).append("\";\n");
				keyList.append("\t\tkeywordList.add(\"").append(m.group(2)).append("\");\n");
			}
			aline = br.readLine();
		}
	}

	public static void generateSyntaxFile(String file) throws Exception {
		FileReader fr = new FileReader(file);
		BufferedReader br = new BufferedReader(fr);

		StringBuilder sb = new StringBuilder();
		StringBuilder keyList = new StringBuilder();

		sb.append("//Auto generated by RfcParser.java. Dont change this file manually\n\n");
		sb.append("package org.yd.util;\n\n");
		sb.append("import java.util.Map;\n");
		sb.append("import java.util.HashMap;\n\n");
		sb.append("import java.util.List;\n");
		sb.append("import java.util.ArrayList;\n\n");
		sb.append("public class YangNodeRelation {\n\n");

		sb.append(
				"\tpublic static final Map<String,List<Relationship>> substatement = new HashMap<String,List<Relationship>>();\n\n");
		sb.append("\tstatic {\n");

		genSubstatement(br, sb);

		sb.append("\t}\n");
		sb.append("}\n");

		// System.out.println(sb.toString());
		FileUtil.writeFile("./src/org/eye/parser/YangNodeRelation.java", sb.toString());
		br.close();
		fr.close();
	}

	private static void genSubstatement(BufferedReader br, StringBuilder sb) throws Exception {
		// The list's Substatements
		Pattern p = Pattern.compile("The\\s+(\\S+)'s Substatement[s]?\\s*$");
		// | substatement | section | cardinality |
		// | leaf | 7.6 | 0..n |
		// +--------------+---------+-------------+
		Pattern p1 = Pattern.compile("\\|\\s*(\\S+)\\s*\\|\\s*(.*?)\\s*\\|\\s*(1|0..1|0..n)\\s*\\|");

		String parent = "";
		int line = 1;
		String aline = br.readLine();
		sb.append("\t\tList<Relationship> list = null;\n");
		while (aline != null) {
			Matcher m = p.matcher(aline);
			if (m.find()) {
				parent = m.group(1);
				// System.out.println("" + line + ">" + parent);
				sb.append("\n\t\tlist = new ArrayList<Relationship>();\n");
				sb.append("\t\tsubstatement.put(\"" + parent + "\", list);\n");
			} else {
				Matcher m1 = p1.matcher(aline);
				if (m1.find()) {
					sb.append("\t\tlist.add(new Relationship(\"");
					sb.append(m1.group(1)).append("\",\"");
					sb.append(m1.group(3)).append("\",\"");
					sb.append(m1.group(2)).append("\"));\n");
					// System.out.println("" + line + "\t" + m1.group(1) +
					// "=" + m1.group(2) + "=" + m1.group(3));
				}
			}
			aline = br.readLine();
			line++;
		}
	}

	public static void main(String[] args) {
		try {
			generateYangKeywordFile("./rfc6020.txt");
			generateSyntaxFile("./rfc6020.txt");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
